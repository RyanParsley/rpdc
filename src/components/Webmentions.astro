---
interface Props {
	target: string;
}
const { target } = Astro.props;

const API_TOKEN = import.meta.env.WEBMENTION_IO_TOKEN;

const fetchWebmentions = async (target: string) => {
	try {
		if (!API_TOKEN) {
			console.log("WEBMENTION_IO_TOKEN not set, skipping webmentions");
			return [];
		}

		const encodedTarget = encodeURIComponent(target);
		const apiUrl = `https://webmention.io/api/mentions.jf2?target=${encodedTarget}&token=${API_TOKEN}`;

		// Retry logic with exponential backoff
		const maxRetries = 3;
		let lastError: Error | null = null;

		for (let attempt = 0; attempt < maxRetries; attempt++) {
			try {
				const controller = new AbortController();
				const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 second timeout

				const response = await fetch(apiUrl, {
					signal: controller.signal,
					headers: { "User-Agent": "Astro-Build/1.0" },
				});
				clearTimeout(timeoutId);

				if (!response.ok) {
					throw new Error(`HTTP ${response.status}: ${response.statusText}`);
				}

				const data = await response.json();
				return data.children || [];
			} catch (error) {
				lastError = error instanceof Error ? error : new Error(String(error));
				console.warn(
					`Webmention fetch attempt ${attempt + 1}/${maxRetries} failed for ${target}: ${lastError.message}`,
				);

				// Don't retry on the last attempt
				if (attempt < maxRetries - 1) {
					// Exponential backoff: 1s, 2s, 4s
					const delayMs = Math.pow(2, attempt) * 1000;
					console.log(`Retrying in ${delayMs}ms...`);
					await new Promise((resolve) => setTimeout(resolve, delayMs));
				}
			}
		}

		// All retries failed
		console.warn(
			`Webmention fetch failed after ${maxRetries} attempts for ${target}: ${lastError?.message || "Unknown error"}`,
		);
		return []; // Return empty array as fallback
	} catch (error) {
		const errorMessage = error instanceof Error ? error.message : String(error);
		console.warn(
			`Webmention fetch setup failed for ${target}: ${errorMessage}`,
		);
		return []; // Return empty array as fallback
	}
};

const isProperty = (item: WebmentionEntry, property: string): boolean => {
	return item["wm-property"] === property;
};

const children = [
	...(await fetchWebmentions(target)),
	...(await fetchWebmentions(`${target}.html`)),
].filter((mention) => mention !== null && mention !== undefined);

const counts = children.reduce(
	(
		{ likesAndRepostsCount, mentionsCount, repliesCount },
		item: WebmentionEntry,
	) => ({
		likesAndRepostsCount:
			likesAndRepostsCount +
			(isProperty(item, "like-of") || isProperty(item, "repost-of") ? 1 : 0),
		mentionsCount: mentionsCount + (isProperty(item, "mention-of") ? 1 : 0),
		repliesCount: repliesCount + (isProperty(item, "in-reply-to") ? 1 : 0),
	}),
	{ likesAndRepostsCount: 0, mentionsCount: 0, repliesCount: 0 },
);

const { likesAndRepostsCount, mentionsCount, repliesCount } = counts;

interface WebmentionContent {
	html: string;
	text: string;
}

interface WebmentionCard {
	type: "card";
	name: string;
	photo: string;
	url: string;
}
interface WebmentionEntry {
	type: "entry";
	author: WebmentionCard;
	url: string;
	published: string;
	"wm-received": string;
	"wm-id": number;
	"wm-source": string;
	"wm-target": string;
	"wm-protocol": string;
	content: WebmentionContent;
	"in-reply-to": string;
	"wm-property": string;
	"wm-private": boolean;
}
---

{
	children.length > 0 && (
		<div class="webmentions">
			<h3>Webmentions</h3>
			<p>
				{likesAndRepostsCount} likes & reposts,
				{mentionsCount} mentions,
				{repliesCount} replies
			</p>
			<ul class="mentions">
				{children.map((mention: WebmentionEntry) => (
					<li class="mention">
						<div class="author">
							<a href={mention.url} target="_blank" rel="noopener noreferrer">
								{mention.author?.photo && (
									<img src={mention.author.photo} class="author-photo" />
								)}
								{mention.author ? mention.author.name : "Someone"}
							</a>{" "}
							{mention["wm-property"] === "in-reply-to"
								? "replied"
								: mention["wm-property"] === "like-of"
									? "liked"
									: mention["wm-property"] === "repost-of"
										? "reposted"
										: "mentioned"}
						</div>
						{mention.content?.text && (
							<blockquote>{mention.content.text}</blockquote>
						)}
					</li>
				))}
			</ul>
		</div>
	)
}

<style>
	.webmentions {
		margin-top: 2rem;
		border-top: 1px solid var(--nord3);
		padding-top: 1rem;
	}

	.webmentions ul {
		list-style-type: none;
		padding: 0;
	}

	.webmentions li {
		margin-bottom: 1rem;
	}

	.webmentions blockquote {
		margin: 0.5rem 0 0 1rem;
		padding-left: 1rem;
		border-left: 2px solid var(--nord10);
	}

	.mention {
		border: solid 1px var(--nord3);
		padding: 1.5rem;
		border-radius: 0.5rem;
	}

	.author {
		display: flex;
		align-items: center;
		gap: 0.5rem;

		& > a {
			align-items: center;
			display: flex;
		}
	}

	.author-photo {
		height: 3rem;
		width: 3rem;
		border-radius: 1.5rem;
		margin: 0.5rem;
	}
</style>
